/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["vendors-node_modules_ledgerhq_hw-transport-u2f_lib-es_TransportU2F_js"],{

/***/ "./node_modules/@ledgerhq/hw-transport-u2f/lib-es/TransportU2F.js":
/*!************************************************************************!*\
  !*** ./node_modules/@ledgerhq/hw-transport-u2f/lib-es/TransportU2F.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ TransportU2F; }\n/* harmony export */ });\n/* harmony import */ var u2f_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! u2f-api */ \"./node_modules/u2f-api/index.js\");\n/* harmony import */ var u2f_api__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(u2f_api__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ledgerhq_hw_transport__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ledgerhq/hw-transport */ \"./node_modules/@ledgerhq/hw-transport/lib-es/Transport.js\");\n/* harmony import */ var _ledgerhq_logs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ledgerhq/logs */ \"./node_modules/@ledgerhq/logs/lib-es/index.js\");\n/* harmony import */ var _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ledgerhq/errors */ \"./node_modules/@ledgerhq/errors/dist/index.js\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\n\n\n\n\nfunction wrapU2FTransportError(originalError, message, id) {\n  const err = new _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_3__.TransportError(message, id); // $FlowFixMe\n\n  err.originalError = originalError;\n  return err;\n}\n\nfunction wrapApdu(apdu, key) {\n  const result = Buffer.alloc(apdu.length);\n\n  for (let i = 0; i < apdu.length; i++) {\n    result[i] = apdu[i] ^ key[i % key.length];\n  }\n\n  return result;\n} // Convert from normal to web-safe, strip trailing \"=\"s\n\n\nconst webSafe64 = base64 => base64.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\"); // Convert from web-safe to normal, add trailing \"=\"s\n\n\nconst normal64 = base64 => base64.replace(/-/g, \"+\").replace(/_/g, \"/\") + \"==\".substring(0, 3 * base64.length % 4);\n\nfunction attemptExchange(apdu, timeoutMillis, scrambleKey, unwrap) {\n  const keyHandle = wrapApdu(apdu, scrambleKey);\n  const challenge = Buffer.from(\"0000000000000000000000000000000000000000000000000000000000000000\", \"hex\");\n  const signRequest = {\n    version: \"U2F_V2\",\n    keyHandle: webSafe64(keyHandle.toString(\"base64\")),\n    challenge: webSafe64(challenge.toString(\"base64\")),\n    appId: location.origin\n  };\n  (0,_ledgerhq_logs__WEBPACK_IMPORTED_MODULE_2__.log)(\"apdu\", \"=> \" + apdu.toString(\"hex\"));\n  return (0,u2f_api__WEBPACK_IMPORTED_MODULE_0__.sign)(signRequest, timeoutMillis / 1000).then(response => {\n    const {\n      signatureData\n    } = response;\n\n    if (typeof signatureData === \"string\") {\n      const data = Buffer.from(normal64(signatureData), \"base64\");\n      let result;\n\n      if (!unwrap) {\n        result = data;\n      } else {\n        result = data.slice(5);\n      }\n\n      (0,_ledgerhq_logs__WEBPACK_IMPORTED_MODULE_2__.log)(\"apdu\", \"<= \" + result.toString(\"hex\"));\n      return result;\n    } else {\n      throw response;\n    }\n  });\n}\n\nlet transportInstances = [];\n\nfunction emitDisconnect() {\n  transportInstances.forEach(t => t.emit(\"disconnect\"));\n  transportInstances = [];\n}\n\nfunction isTimeoutU2FError(u2fError) {\n  return u2fError.metaData.code === 5;\n}\n/**\n * U2F web Transport implementation\n * @example\n * import TransportU2F from \"@ledgerhq/hw-transport-u2f\";\n * ...\n * TransportU2F.create().then(transport => ...)\n */\n\n\nclass TransportU2F extends _ledgerhq_hw_transport__WEBPACK_IMPORTED_MODULE_1__.default {\n  /*\n   */\n\n  /*\n   */\n\n  /**\n   * static function to create a new Transport from a connected Ledger device discoverable via U2F (browser support)\n   */\n  static async open(_, _openTimeout = 5000) {\n    return new TransportU2F();\n  }\n\n  constructor() {\n    super();\n    this.scrambleKey = void 0;\n    this.unwrap = true;\n    transportInstances.push(this);\n  }\n  /**\n   * Exchange with the device using APDU protocol.\n   * @param apdu\n   * @returns a promise of apdu response\n   */\n\n\n  async exchange(apdu) {\n    try {\n      return await attemptExchange(apdu, this.exchangeTimeout, this.scrambleKey, this.unwrap);\n    } catch (e) {\n      const isU2FError = typeof e.metaData === \"object\";\n\n      if (isU2FError) {\n        if (isTimeoutU2FError(e)) {\n          emitDisconnect();\n        } // the wrapping make error more usable and \"printable\" to the end user.\n\n\n        throw wrapU2FTransportError(e, \"Failed to sign with Ledger device: U2F \" + e.metaData.type, \"U2F_\" + e.metaData.code);\n      } else {\n        throw e;\n      }\n    }\n  }\n  /**\n   */\n\n\n  setScrambleKey(scrambleKey) {\n    this.scrambleKey = Buffer.from(scrambleKey, \"ascii\");\n  }\n  /**\n   */\n\n\n  setUnwrap(unwrap) {\n    this.unwrap = unwrap;\n  }\n\n  close() {\n    // u2f have no way to clean things up\n    return Promise.resolve();\n  }\n\n}\nTransportU2F.isSupported = u2f_api__WEBPACK_IMPORTED_MODULE_0__.isSupported;\n\nTransportU2F.list = () => // this transport is not discoverable but we are going to guess if it is here with isSupported()\n(0,u2f_api__WEBPACK_IMPORTED_MODULE_0__.isSupported)().then(supported => supported ? [null] : []);\n\nTransportU2F.listen = observer => {\n  let unsubscribed = false;\n  (0,u2f_api__WEBPACK_IMPORTED_MODULE_0__.isSupported)().then(supported => {\n    if (unsubscribed) return;\n\n    if (supported) {\n      observer.next({\n        type: \"add\",\n        descriptor: null\n      });\n      observer.complete();\n    } else {\n      observer.error(new _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_3__.TransportError(\"U2F browser support is needed for Ledger. \" + \"Please use Chrome, Opera or Firefox with a U2F extension. \" + \"Also make sure you're on an HTTPS connection\", \"U2FNotSupported\"));\n    }\n  });\n  return {\n    unsubscribe: () => {\n      unsubscribed = true;\n    }\n  };\n};\n//# sourceMappingURL=TransportU2F.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BsZWRnZXJocS9ody10cmFuc3BvcnQtdTJmL2xpYi1lcy9UcmFuc3BvcnRVMkYuanM/ZDQxOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQTRDO0FBQ0c7QUFDVjtBQUNhOztBQUVsRDtBQUNBLGtCQUFrQiw0REFBYyxjQUFjOztBQUU5QztBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUIsTUFBTTs7QUFFdkIsaUJBQWlCLGlCQUFpQjtBQUNsQztBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7O0FBR0QsOEZBQThGOzs7QUFHOUY7O0FBRUE7QUFDQTtBQUNBLG9CQUFvQixNQUFNO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsbURBQUc7QUFDTCxTQUFTLDZDQUFJO0FBQ2I7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQSxtQkFBbUIsTUFBTTtBQUN6Qjs7QUFFQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUEsTUFBTSxtREFBRztBQUNUO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdlLDJCQUEyQiwyREFBUztBQUNuRDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOzs7QUFHVDtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0EsdUJBQXVCLE1BQU07QUFDN0I7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwyQkFBMkIsZ0RBQVc7O0FBRXRDO0FBQ0Esb0RBQVc7O0FBRVg7QUFDQTtBQUNBLEVBQUUsb0RBQVc7QUFDYjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEtBQUs7QUFDTCx5QkFBeUIsNERBQWM7QUFDdkM7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGxlZGdlcmhxL2h3LXRyYW5zcG9ydC11MmYvbGliLWVzL1RyYW5zcG9ydFUyRi5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNpZ24sIGlzU3VwcG9ydGVkIH0gZnJvbSBcInUyZi1hcGlcIjtcbmltcG9ydCBUcmFuc3BvcnQgZnJvbSBcIkBsZWRnZXJocS9ody10cmFuc3BvcnRcIjtcbmltcG9ydCB7IGxvZyB9IGZyb20gXCJAbGVkZ2VyaHEvbG9nc1wiO1xuaW1wb3J0IHsgVHJhbnNwb3J0RXJyb3IgfSBmcm9tIFwiQGxlZGdlcmhxL2Vycm9yc1wiO1xuXG5mdW5jdGlvbiB3cmFwVTJGVHJhbnNwb3J0RXJyb3Iob3JpZ2luYWxFcnJvciwgbWVzc2FnZSwgaWQpIHtcbiAgY29uc3QgZXJyID0gbmV3IFRyYW5zcG9ydEVycm9yKG1lc3NhZ2UsIGlkKTsgLy8gJEZsb3dGaXhNZVxuXG4gIGVyci5vcmlnaW5hbEVycm9yID0gb3JpZ2luYWxFcnJvcjtcbiAgcmV0dXJuIGVycjtcbn1cblxuZnVuY3Rpb24gd3JhcEFwZHUoYXBkdSwga2V5KSB7XG4gIGNvbnN0IHJlc3VsdCA9IEJ1ZmZlci5hbGxvYyhhcGR1Lmxlbmd0aCk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcGR1Lmxlbmd0aDsgaSsrKSB7XG4gICAgcmVzdWx0W2ldID0gYXBkdVtpXSBeIGtleVtpICUga2V5Lmxlbmd0aF07XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufSAvLyBDb252ZXJ0IGZyb20gbm9ybWFsIHRvIHdlYi1zYWZlLCBzdHJpcCB0cmFpbGluZyBcIj1cInNcblxuXG5jb25zdCB3ZWJTYWZlNjQgPSBiYXNlNjQgPT4gYmFzZTY0LnJlcGxhY2UoL1xcKy9nLCBcIi1cIikucmVwbGFjZSgvXFwvL2csIFwiX1wiKS5yZXBsYWNlKC89KyQvLCBcIlwiKTsgLy8gQ29udmVydCBmcm9tIHdlYi1zYWZlIHRvIG5vcm1hbCwgYWRkIHRyYWlsaW5nIFwiPVwic1xuXG5cbmNvbnN0IG5vcm1hbDY0ID0gYmFzZTY0ID0+IGJhc2U2NC5yZXBsYWNlKC8tL2csIFwiK1wiKS5yZXBsYWNlKC9fL2csIFwiL1wiKSArIFwiPT1cIi5zdWJzdHJpbmcoMCwgMyAqIGJhc2U2NC5sZW5ndGggJSA0KTtcblxuZnVuY3Rpb24gYXR0ZW1wdEV4Y2hhbmdlKGFwZHUsIHRpbWVvdXRNaWxsaXMsIHNjcmFtYmxlS2V5LCB1bndyYXApIHtcbiAgY29uc3Qga2V5SGFuZGxlID0gd3JhcEFwZHUoYXBkdSwgc2NyYW1ibGVLZXkpO1xuICBjb25zdCBjaGFsbGVuZ2UgPSBCdWZmZXIuZnJvbShcIjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcIiwgXCJoZXhcIik7XG4gIGNvbnN0IHNpZ25SZXF1ZXN0ID0ge1xuICAgIHZlcnNpb246IFwiVTJGX1YyXCIsXG4gICAga2V5SGFuZGxlOiB3ZWJTYWZlNjQoa2V5SGFuZGxlLnRvU3RyaW5nKFwiYmFzZTY0XCIpKSxcbiAgICBjaGFsbGVuZ2U6IHdlYlNhZmU2NChjaGFsbGVuZ2UudG9TdHJpbmcoXCJiYXNlNjRcIikpLFxuICAgIGFwcElkOiBsb2NhdGlvbi5vcmlnaW5cbiAgfTtcbiAgbG9nKFwiYXBkdVwiLCBcIj0+IFwiICsgYXBkdS50b1N0cmluZyhcImhleFwiKSk7XG4gIHJldHVybiBzaWduKHNpZ25SZXF1ZXN0LCB0aW1lb3V0TWlsbGlzIC8gMTAwMCkudGhlbihyZXNwb25zZSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgc2lnbmF0dXJlRGF0YVxuICAgIH0gPSByZXNwb25zZTtcblxuICAgIGlmICh0eXBlb2Ygc2lnbmF0dXJlRGF0YSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgY29uc3QgZGF0YSA9IEJ1ZmZlci5mcm9tKG5vcm1hbDY0KHNpZ25hdHVyZURhdGEpLCBcImJhc2U2NFwiKTtcbiAgICAgIGxldCByZXN1bHQ7XG5cbiAgICAgIGlmICghdW53cmFwKSB7XG4gICAgICAgIHJlc3VsdCA9IGRhdGE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQgPSBkYXRhLnNsaWNlKDUpO1xuICAgICAgfVxuXG4gICAgICBsb2coXCJhcGR1XCIsIFwiPD0gXCIgKyByZXN1bHQudG9TdHJpbmcoXCJoZXhcIikpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgcmVzcG9uc2U7XG4gICAgfVxuICB9KTtcbn1cblxubGV0IHRyYW5zcG9ydEluc3RhbmNlcyA9IFtdO1xuXG5mdW5jdGlvbiBlbWl0RGlzY29ubmVjdCgpIHtcbiAgdHJhbnNwb3J0SW5zdGFuY2VzLmZvckVhY2godCA9PiB0LmVtaXQoXCJkaXNjb25uZWN0XCIpKTtcbiAgdHJhbnNwb3J0SW5zdGFuY2VzID0gW107XG59XG5cbmZ1bmN0aW9uIGlzVGltZW91dFUyRkVycm9yKHUyZkVycm9yKSB7XG4gIHJldHVybiB1MmZFcnJvci5tZXRhRGF0YS5jb2RlID09PSA1O1xufVxuLyoqXG4gKiBVMkYgd2ViIFRyYW5zcG9ydCBpbXBsZW1lbnRhdGlvblxuICogQGV4YW1wbGVcbiAqIGltcG9ydCBUcmFuc3BvcnRVMkYgZnJvbSBcIkBsZWRnZXJocS9ody10cmFuc3BvcnQtdTJmXCI7XG4gKiAuLi5cbiAqIFRyYW5zcG9ydFUyRi5jcmVhdGUoKS50aGVuKHRyYW5zcG9ydCA9PiAuLi4pXG4gKi9cblxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUcmFuc3BvcnRVMkYgZXh0ZW5kcyBUcmFuc3BvcnQge1xuICAvKlxuICAgKi9cblxuICAvKlxuICAgKi9cblxuICAvKipcbiAgICogc3RhdGljIGZ1bmN0aW9uIHRvIGNyZWF0ZSBhIG5ldyBUcmFuc3BvcnQgZnJvbSBhIGNvbm5lY3RlZCBMZWRnZXIgZGV2aWNlIGRpc2NvdmVyYWJsZSB2aWEgVTJGIChicm93c2VyIHN1cHBvcnQpXG4gICAqL1xuICBzdGF0aWMgYXN5bmMgb3BlbihfLCBfb3BlblRpbWVvdXQgPSA1MDAwKSB7XG4gICAgcmV0dXJuIG5ldyBUcmFuc3BvcnRVMkYoKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5zY3JhbWJsZUtleSA9IHZvaWQgMDtcbiAgICB0aGlzLnVud3JhcCA9IHRydWU7XG4gICAgdHJhbnNwb3J0SW5zdGFuY2VzLnB1c2godGhpcyk7XG4gIH1cbiAgLyoqXG4gICAqIEV4Y2hhbmdlIHdpdGggdGhlIGRldmljZSB1c2luZyBBUERVIHByb3RvY29sLlxuICAgKiBAcGFyYW0gYXBkdVxuICAgKiBAcmV0dXJucyBhIHByb21pc2Ugb2YgYXBkdSByZXNwb25zZVxuICAgKi9cblxuXG4gIGFzeW5jIGV4Y2hhbmdlKGFwZHUpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IGF0dGVtcHRFeGNoYW5nZShhcGR1LCB0aGlzLmV4Y2hhbmdlVGltZW91dCwgdGhpcy5zY3JhbWJsZUtleSwgdGhpcy51bndyYXApO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnN0IGlzVTJGRXJyb3IgPSB0eXBlb2YgZS5tZXRhRGF0YSA9PT0gXCJvYmplY3RcIjtcblxuICAgICAgaWYgKGlzVTJGRXJyb3IpIHtcbiAgICAgICAgaWYgKGlzVGltZW91dFUyRkVycm9yKGUpKSB7XG4gICAgICAgICAgZW1pdERpc2Nvbm5lY3QoKTtcbiAgICAgICAgfSAvLyB0aGUgd3JhcHBpbmcgbWFrZSBlcnJvciBtb3JlIHVzYWJsZSBhbmQgXCJwcmludGFibGVcIiB0byB0aGUgZW5kIHVzZXIuXG5cblxuICAgICAgICB0aHJvdyB3cmFwVTJGVHJhbnNwb3J0RXJyb3IoZSwgXCJGYWlsZWQgdG8gc2lnbiB3aXRoIExlZGdlciBkZXZpY2U6IFUyRiBcIiArIGUubWV0YURhdGEudHlwZSwgXCJVMkZfXCIgKyBlLm1ldGFEYXRhLmNvZGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqL1xuXG5cbiAgc2V0U2NyYW1ibGVLZXkoc2NyYW1ibGVLZXkpIHtcbiAgICB0aGlzLnNjcmFtYmxlS2V5ID0gQnVmZmVyLmZyb20oc2NyYW1ibGVLZXksIFwiYXNjaWlcIik7XG4gIH1cbiAgLyoqXG4gICAqL1xuXG5cbiAgc2V0VW53cmFwKHVud3JhcCkge1xuICAgIHRoaXMudW53cmFwID0gdW53cmFwO1xuICB9XG5cbiAgY2xvc2UoKSB7XG4gICAgLy8gdTJmIGhhdmUgbm8gd2F5IHRvIGNsZWFuIHRoaW5ncyB1cFxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgfVxuXG59XG5UcmFuc3BvcnRVMkYuaXNTdXBwb3J0ZWQgPSBpc1N1cHBvcnRlZDtcblxuVHJhbnNwb3J0VTJGLmxpc3QgPSAoKSA9PiAvLyB0aGlzIHRyYW5zcG9ydCBpcyBub3QgZGlzY292ZXJhYmxlIGJ1dCB3ZSBhcmUgZ29pbmcgdG8gZ3Vlc3MgaWYgaXQgaXMgaGVyZSB3aXRoIGlzU3VwcG9ydGVkKClcbmlzU3VwcG9ydGVkKCkudGhlbihzdXBwb3J0ZWQgPT4gc3VwcG9ydGVkID8gW251bGxdIDogW10pO1xuXG5UcmFuc3BvcnRVMkYubGlzdGVuID0gb2JzZXJ2ZXIgPT4ge1xuICBsZXQgdW5zdWJzY3JpYmVkID0gZmFsc2U7XG4gIGlzU3VwcG9ydGVkKCkudGhlbihzdXBwb3J0ZWQgPT4ge1xuICAgIGlmICh1bnN1YnNjcmliZWQpIHJldHVybjtcblxuICAgIGlmIChzdXBwb3J0ZWQpIHtcbiAgICAgIG9ic2VydmVyLm5leHQoe1xuICAgICAgICB0eXBlOiBcImFkZFwiLFxuICAgICAgICBkZXNjcmlwdG9yOiBudWxsXG4gICAgICB9KTtcbiAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9ic2VydmVyLmVycm9yKG5ldyBUcmFuc3BvcnRFcnJvcihcIlUyRiBicm93c2VyIHN1cHBvcnQgaXMgbmVlZGVkIGZvciBMZWRnZXIuIFwiICsgXCJQbGVhc2UgdXNlIENocm9tZSwgT3BlcmEgb3IgRmlyZWZveCB3aXRoIGEgVTJGIGV4dGVuc2lvbi4gXCIgKyBcIkFsc28gbWFrZSBzdXJlIHlvdSdyZSBvbiBhbiBIVFRQUyBjb25uZWN0aW9uXCIsIFwiVTJGTm90U3VwcG9ydGVkXCIpKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHVuc3Vic2NyaWJlOiAoKSA9PiB7XG4gICAgICB1bnN1YnNjcmliZWQgPSB0cnVlO1xuICAgIH1cbiAgfTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1UcmFuc3BvcnRVMkYuanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@ledgerhq/hw-transport-u2f/lib-es/TransportU2F.js\n");

/***/ }),

/***/ "./node_modules/@ledgerhq/hw-transport/lib-es/Transport.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@ledgerhq/hw-transport/lib-es/Transport.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TransportError\": function() { return /* reexport safe */ _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_1__.TransportError; },\n/* harmony export */   \"TransportStatusError\": function() { return /* reexport safe */ _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_1__.TransportStatusError; },\n/* harmony export */   \"StatusCodes\": function() { return /* reexport safe */ _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_1__.StatusCodes; },\n/* harmony export */   \"getAltStatusMessage\": function() { return /* reexport safe */ _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_1__.getAltStatusMessage; },\n/* harmony export */   \"default\": function() { return /* binding */ Transport; }\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ledgerhq/errors */ \"./node_modules/@ledgerhq/errors/dist/index.js\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\n\n\n/**\n */\n\n/**\n * Transport defines the generic interface to share between node/u2f impl\n * A **Descriptor** is a parametric type that is up to be determined for the implementation.\n * it can be for instance an ID, an file path, a URL,...\n */\nclass Transport {\n  constructor() {\n    this.exchangeTimeout = 30000;\n    this.unresponsiveTimeout = 15000;\n    this.deviceModel = null;\n    this._events = new (events__WEBPACK_IMPORTED_MODULE_0___default())();\n\n    this.send = async (cla, ins, p1, p2, data = Buffer.alloc(0), statusList = [_ledgerhq_errors__WEBPACK_IMPORTED_MODULE_1__.StatusCodes.OK]) => {\n      if (data.length >= 256) {\n        throw new _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_1__.TransportError(\"data.length exceed 256 bytes limit. Got: \" + data.length, \"DataLengthTooBig\");\n      }\n\n      const response = await this.exchange(Buffer.concat([Buffer.from([cla, ins, p1, p2]), Buffer.from([data.length]), data]));\n      const sw = response.readUInt16BE(response.length - 2);\n\n      if (!statusList.some(s => s === sw)) {\n        throw new _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_1__.TransportStatusError(sw);\n      }\n\n      return response;\n    };\n\n    this.exchangeBusyPromise = void 0;\n\n    this.exchangeAtomicImpl = async f => {\n      if (this.exchangeBusyPromise) {\n        throw new _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_1__.TransportRaceCondition(\"An action was already pending on the Ledger device. Please deny or reconnect.\");\n      }\n\n      let resolveBusy;\n      const busyPromise = new Promise(r => {\n        resolveBusy = r;\n      });\n      this.exchangeBusyPromise = busyPromise;\n      let unresponsiveReached = false;\n      const timeout = setTimeout(() => {\n        unresponsiveReached = true;\n        this.emit(\"unresponsive\");\n      }, this.unresponsiveTimeout);\n\n      try {\n        const res = await f();\n\n        if (unresponsiveReached) {\n          this.emit(\"responsive\");\n        }\n\n        return res;\n      } finally {\n        clearTimeout(timeout);\n        if (resolveBusy) resolveBusy();\n        this.exchangeBusyPromise = null;\n      }\n    };\n\n    this._appAPIlock = null;\n  }\n\n  /**\n   * low level api to communicate with the device\n   * This method is for implementations to implement but should not be directly called.\n   * Instead, the recommanded way is to use send() method\n   * @param apdu the data to send\n   * @return a Promise of response data\n   */\n  exchange(_apdu) {\n    throw new Error(\"exchange not implemented\");\n  }\n  /**\n   * set the \"scramble key\" for the next exchanges with the device.\n   * Each App can have a different scramble key and they internally will set it at instanciation.\n   * @param key the scramble key\n   */\n\n\n  setScrambleKey(_key) {}\n  /**\n   * close the exchange with the device.\n   * @return a Promise that ends when the transport is closed.\n   */\n\n\n  close() {\n    return Promise.resolve();\n  }\n\n  /**\n   * Listen to an event on an instance of transport.\n   * Transport implementation can have specific events. Here is the common events:\n   * * `\"disconnect\"` : triggered if Transport is disconnected\n   */\n  on(eventName, cb) {\n    this._events.on(eventName, cb);\n  }\n  /**\n   * Stop listening to an event on an instance of transport.\n   */\n\n\n  off(eventName, cb) {\n    this._events.removeListener(eventName, cb);\n  }\n\n  emit(event, ...args) {\n    this._events.emit(event, ...args);\n  }\n  /**\n   * Enable or not logs of the binary exchange\n   */\n\n\n  setDebugMode() {\n    console.warn(\"setDebugMode is deprecated. use @ledgerhq/logs instead. No logs are emitted in this anymore.\");\n  }\n  /**\n   * Set a timeout (in milliseconds) for the exchange call. Only some transport might implement it. (e.g. U2F)\n   */\n\n\n  setExchangeTimeout(exchangeTimeout) {\n    this.exchangeTimeout = exchangeTimeout;\n  }\n  /**\n   * Define the delay before emitting \"unresponsive\" on an exchange that does not respond\n   */\n\n\n  setExchangeUnresponsiveTimeout(unresponsiveTimeout) {\n    this.unresponsiveTimeout = unresponsiveTimeout;\n  }\n  /**\n   * wrapper on top of exchange to simplify work of the implementation.\n   * @param cla\n   * @param ins\n   * @param p1\n   * @param p2\n   * @param data\n   * @param statusList is a list of accepted status code (shorts). [0x9000] by default\n   * @return a Promise of response buffer\n   */\n\n\n  /**\n   * create() allows to open the first descriptor available or\n   * throw if there is none or if timeout is reached.\n   * This is a light helper, alternative to using listen() and open() (that you may need for any more advanced usecase)\n   * @example\n  TransportFoo.create().then(transport => ...)\n   */\n  static create(openTimeout = 3000, listenTimeout) {\n    return new Promise((resolve, reject) => {\n      let found = false;\n      const sub = this.listen({\n        next: e => {\n          found = true;\n          if (sub) sub.unsubscribe();\n          if (listenTimeoutId) clearTimeout(listenTimeoutId);\n          this.open(e.descriptor, openTimeout).then(resolve, reject);\n        },\n        error: e => {\n          if (listenTimeoutId) clearTimeout(listenTimeoutId);\n          reject(e);\n        },\n        complete: () => {\n          if (listenTimeoutId) clearTimeout(listenTimeoutId);\n\n          if (!found) {\n            reject(new _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_1__.TransportError(this.ErrorMessage_NoDeviceFound, \"NoDeviceFound\"));\n          }\n        }\n      });\n      const listenTimeoutId = listenTimeout ? setTimeout(() => {\n        sub.unsubscribe();\n        reject(new _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_1__.TransportError(this.ErrorMessage_ListenTimeout, \"ListenTimeout\"));\n      }, listenTimeout) : null;\n    });\n  }\n\n  decorateAppAPIMethods(self, methods, scrambleKey) {\n    for (let methodName of methods) {\n      self[methodName] = this.decorateAppAPIMethod(methodName, self[methodName], self, scrambleKey);\n    }\n  }\n\n  decorateAppAPIMethod(methodName, f, ctx, scrambleKey) {\n    return async (...args) => {\n      const {\n        _appAPIlock\n      } = this;\n\n      if (_appAPIlock) {\n        return Promise.reject(new _ledgerhq_errors__WEBPACK_IMPORTED_MODULE_1__.TransportError(\"Ledger Device is busy (lock \" + _appAPIlock + \")\", \"TransportLocked\"));\n      }\n\n      try {\n        this._appAPIlock = methodName;\n        this.setScrambleKey(scrambleKey);\n        return await f.apply(ctx, args);\n      } finally {\n        this._appAPIlock = null;\n      }\n    };\n  }\n\n}\nTransport.isSupported = void 0;\nTransport.list = void 0;\nTransport.listen = void 0;\nTransport.open = void 0;\nTransport.ErrorMessage_ListenTimeout = \"No Ledger device found (timeout)\";\nTransport.ErrorMessage_NoDeviceFound = \"No Ledger device found\";\n//# sourceMappingURL=Transport.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@ledgerhq/hw-transport/lib-es/Transport.js\n");

/***/ }),

/***/ "./node_modules/u2f-api/index.js":
/*!***************************************!*\
  !*** ./node_modules/u2f-api/index.js ***!
  \***************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval("\nmodule.exports = __webpack_require__(/*! ./lib/u2f-api */ \"./node_modules/u2f-api/lib/u2f-api.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3UyZi1hcGkvaW5kZXguanM/ZDVjZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTtBQUNiLGtHQUEyQyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy91MmYtYXBpL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCAnLi9saWIvdTJmLWFwaScgKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/u2f-api/index.js\n");

/***/ }),

/***/ "./node_modules/u2f-api/lib/google-u2f-api.js":
/*!****************************************************!*\
  !*** ./node_modules/u2f-api/lib/google-u2f-api.js ***!
  \****************************************************/
/***/ (function(module) {

"use strict";
eval("// Copyright 2014 Google Inc. All rights reserved\n//\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file or at\n// https://developers.google.com/open-source/licenses/bsd\n\n/**\n * @fileoverview The U2F api.\n */\n\n\n\n/** Namespace for the U2F api.\n * @type {Object}\n */\nvar u2f = u2f || {};\n\nmodule.exports = u2f; // Adaptation for u2f-api package\n\n/**\n * The U2F extension id\n * @type {string}\n * @const\n */\nu2f.EXTENSION_ID = 'kmendfapggjehodndflmmgagdbamhnfd';\n\n/**\n * Message types for messsages to/from the extension\n * @const\n * @enum {string}\n */\nu2f.MessageTypes = {\n  'U2F_REGISTER_REQUEST': 'u2f_register_request',\n  'U2F_SIGN_REQUEST': 'u2f_sign_request',\n  'U2F_REGISTER_RESPONSE': 'u2f_register_response',\n  'U2F_SIGN_RESPONSE': 'u2f_sign_response'\n};\n\n/**\n * Response status codes\n * @const\n * @enum {number}\n */\nu2f.ErrorCodes = {\n  'OK': 0,\n  'OTHER_ERROR': 1,\n  'BAD_REQUEST': 2,\n  'CONFIGURATION_UNSUPPORTED': 3,\n  'DEVICE_INELIGIBLE': 4,\n  'TIMEOUT': 5\n};\n\n/**\n * A message type for registration requests\n * @typedef {{\n *   type: u2f.MessageTypes,\n *   signRequests: Array.<u2f.SignRequest>,\n *   registerRequests: ?Array.<u2f.RegisterRequest>,\n *   timeoutSeconds: ?number,\n *   requestId: ?number\n * }}\n */\nu2f.Request;\n\n/**\n * A message for registration responses\n * @typedef {{\n *   type: u2f.MessageTypes,\n *   responseData: (u2f.Error | u2f.RegisterResponse | u2f.SignResponse),\n *   requestId: ?number\n * }}\n */\nu2f.Response;\n\n/**\n * An error object for responses\n * @typedef {{\n *   errorCode: u2f.ErrorCodes,\n *   errorMessage: ?string\n * }}\n */\nu2f.Error;\n\n/**\n * Data object for a single sign request.\n * @typedef {{\n *   version: string,\n *   challenge: string,\n *   keyHandle: string,\n *   appId: string\n * }}\n */\nu2f.SignRequest;\n\n/**\n * Data object for a sign response.\n * @typedef {{\n *   keyHandle: string,\n *   signatureData: string,\n *   clientData: string\n * }}\n */\nu2f.SignResponse;\n\n/**\n * Data object for a registration request.\n * @typedef {{\n *   version: string,\n *   challenge: string,\n *   appId: string\n * }}\n */\nu2f.RegisterRequest;\n\n/**\n * Data object for a registration response.\n * @typedef {{\n *   registrationData: string,\n *   clientData: string\n * }}\n */\nu2f.RegisterResponse;\n\n\n// Low level MessagePort API support\n\n/**\n * Call MessagePort disconnect\n */\nu2f.disconnect = function() {\n  if (u2f.port_ && u2f.port_.port_) {\n    u2f.port_.port_.disconnect();\n    u2f.port_ = null;\n  }\n};\n\n/**\n * Sets up a MessagePort to the U2F extension using the\n * available mechanisms.\n * @param {function((MessagePort|u2f.WrappedChromeRuntimePort_))} callback\n */\nu2f.getMessagePort = function(callback) {\n  if (typeof chrome != 'undefined' && chrome.runtime) {\n    // The actual message here does not matter, but we need to get a reply\n    // for the callback to run. Thus, send an empty signature request\n    // in order to get a failure response.\n    var msg = {\n      type: u2f.MessageTypes.U2F_SIGN_REQUEST,\n      signRequests: []\n    };\n    chrome.runtime.sendMessage(u2f.EXTENSION_ID, msg, function() {\n      if (!chrome.runtime.lastError) {\n        // We are on a whitelisted origin and can talk directly\n        // with the extension.\n        u2f.getChromeRuntimePort_(callback);\n      } else {\n        // chrome.runtime was available, but we couldn't message\n        // the extension directly, use iframe\n        u2f.getIframePort_(callback);\n      }\n    });\n  } else {\n    // chrome.runtime was not available at all, which is normal\n    // when this origin doesn't have access to any extensions.\n    u2f.getIframePort_(callback);\n  }\n};\n\n/**\n * Connects directly to the extension via chrome.runtime.connect\n * @param {function(u2f.WrappedChromeRuntimePort_)} callback\n * @private\n */\nu2f.getChromeRuntimePort_ = function(callback) {\n  var port = chrome.runtime.connect(u2f.EXTENSION_ID,\n    {'includeTlsChannelId': true});\n  setTimeout(function() {\n    callback(null, new u2f.WrappedChromeRuntimePort_(port));\n  }, 0);\n};\n\n/**\n * A wrapper for chrome.runtime.Port that is compatible with MessagePort.\n * @param {Port} port\n * @constructor\n * @private\n */\nu2f.WrappedChromeRuntimePort_ = function(port) {\n  this.port_ = port;\n};\n\n/**\n * Posts a message on the underlying channel.\n * @param {Object} message\n */\nu2f.WrappedChromeRuntimePort_.prototype.postMessage = function(message) {\n  this.port_.postMessage(message);\n};\n\n/**\n * Emulates the HTML 5 addEventListener interface. Works only for the\n * onmessage event, which is hooked up to the chrome.runtime.Port.onMessage.\n * @param {string} eventName\n * @param {function({data: Object})} handler\n */\nu2f.WrappedChromeRuntimePort_.prototype.addEventListener =\n    function(eventName, handler) {\n  var name = eventName.toLowerCase();\n  if (name == 'message' || name == 'onmessage') {\n    this.port_.onMessage.addListener(function(message) {\n      // Emulate a minimal MessageEvent object\n      handler({'data': message});\n    });\n  } else {\n    console.error('WrappedChromeRuntimePort only supports onMessage');\n  }\n};\n\n/**\n * Sets up an embedded trampoline iframe, sourced from the extension.\n * @param {function(MessagePort)} callback\n * @private\n */\nu2f.getIframePort_ = function(callback) {\n  // Create the iframe\n  var iframeOrigin = 'chrome-extension://' + u2f.EXTENSION_ID;\n  var iframe = document.createElement('iframe');\n  iframe.src = iframeOrigin + '/u2f-comms.html';\n  iframe.setAttribute('style', 'display:none');\n  document.body.appendChild(iframe);\n\n  var hasCalledBack = false;\n\n  var channel = new MessageChannel();\n  var ready = function(message) {\n    if (message.data == 'ready') {\n      channel.port1.removeEventListener('message', ready);\n      if (!hasCalledBack)\n      {\n        hasCalledBack = true;\n        callback(null, channel.port1);\n      }\n    } else {\n      console.error('First event on iframe port was not \"ready\"');\n    }\n  };\n  channel.port1.addEventListener('message', ready);\n  channel.port1.start();\n\n  iframe.addEventListener('load', function() {\n    // Deliver the port to the iframe and initialize\n    iframe.contentWindow.postMessage('init', iframeOrigin, [channel.port2]);\n  });\n\n  // Give this 200ms to initialize, after that, we treat this method as failed\n  setTimeout(function() {\n    if (!hasCalledBack)\n    {\n      hasCalledBack = true;\n      callback(new Error(\"IFrame extension not supported\"));\n    }\n  }, 200);\n};\n\n\n// High-level JS API\n\n/**\n * Default extension response timeout in seconds.\n * @const\n */\nu2f.EXTENSION_TIMEOUT_SEC = 30;\n\n/**\n * A singleton instance for a MessagePort to the extension.\n * @type {MessagePort|u2f.WrappedChromeRuntimePort_}\n * @private\n */\nu2f.port_ = null;\n\n/**\n * Callbacks waiting for a port\n * @type {Array.<function((MessagePort|u2f.WrappedChromeRuntimePort_))>}\n * @private\n */\nu2f.waitingForPort_ = [];\n\n/**\n * A counter for requestIds.\n * @type {number}\n * @private\n */\nu2f.reqCounter_ = 0;\n\n/**\n * A map from requestIds to client callbacks\n * @type {Object.<number,(function((u2f.Error|u2f.RegisterResponse))\n *                       |function((u2f.Error|u2f.SignResponse)))>}\n * @private\n */\nu2f.callbackMap_ = {};\n\n/**\n * Creates or retrieves the MessagePort singleton to use.\n * @param {function((MessagePort|u2f.WrappedChromeRuntimePort_))} callback\n * @private\n */\nu2f.getPortSingleton_ = function(callback) {\n  if (u2f.port_) {\n    callback(null, u2f.port_);\n  } else {\n    if (u2f.waitingForPort_.length == 0) {\n      u2f.getMessagePort(function(err, port) {\n        if (!err) {\n          u2f.port_ = port;\n          u2f.port_.addEventListener('message',\n            /** @type {function(Event)} */ (u2f.responseHandler_));\n        }\n\n        // Careful, here be async callbacks. Maybe.\n        while (u2f.waitingForPort_.length)\n          u2f.waitingForPort_.shift()(err, port);\n      });\n    }\n    u2f.waitingForPort_.push(callback);\n  }\n};\n\n/**\n * Handles response messages from the extension.\n * @param {MessageEvent.<u2f.Response>} message\n * @private\n */\nu2f.responseHandler_ = function(message) {\n  var response = message.data;\n  var reqId = response['requestId'];\n  if (!reqId || !u2f.callbackMap_[reqId]) {\n    console.error('Unknown or missing requestId in response.');\n    return;\n  }\n  var cb = u2f.callbackMap_[reqId];\n  delete u2f.callbackMap_[reqId];\n  cb(null, response['responseData']);\n};\n\n/**\n * Calls the callback with true or false as first and only argument\n * @param {Function} callback\n */\nu2f.isSupported = function(callback) {\n  u2f.getPortSingleton_(function(err, port) {\n    callback(!err);\n  });\n}\n\n/**\n * Dispatches an array of sign requests to available U2F tokens.\n * @param {Array.<u2f.SignRequest>} signRequests\n * @param {function((u2f.Error|u2f.SignResponse))} callback\n * @param {number=} opt_timeoutSeconds\n */\nu2f.sign = function(signRequests, callback, opt_timeoutSeconds) {\n  u2f.getPortSingleton_(function(err, port) {\n    if (err)\n      return callback(err);\n\n    var reqId = ++u2f.reqCounter_;\n    u2f.callbackMap_[reqId] = callback;\n    var req = {\n      type: u2f.MessageTypes.U2F_SIGN_REQUEST,\n      signRequests: signRequests,\n      timeoutSeconds: (typeof opt_timeoutSeconds !== 'undefined' ?\n        opt_timeoutSeconds : u2f.EXTENSION_TIMEOUT_SEC),\n      requestId: reqId\n    };\n    port.postMessage(req);\n  });\n};\n\n/**\n * Dispatches register requests to available U2F tokens. An array of sign\n * requests identifies already registered tokens.\n * @param {Array.<u2f.RegisterRequest>} registerRequests\n * @param {Array.<u2f.SignRequest>} signRequests\n * @param {function((u2f.Error|u2f.RegisterResponse))} callback\n * @param {number=} opt_timeoutSeconds\n */\nu2f.register = function(registerRequests, signRequests,\n    callback, opt_timeoutSeconds) {\n  u2f.getPortSingleton_(function(err, port) {\n    if (err)\n      return callback(err);\n\n    var reqId = ++u2f.reqCounter_;\n    u2f.callbackMap_[reqId] = callback;\n    var req = {\n      type: u2f.MessageTypes.U2F_REGISTER_REQUEST,\n      signRequests: signRequests,\n      registerRequests: registerRequests,\n      timeoutSeconds: (typeof opt_timeoutSeconds !== 'undefined' ?\n        opt_timeoutSeconds : u2f.EXTENSION_TIMEOUT_SEC),\n      requestId: reqId\n    };\n    port.postMessage(req);\n  });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3UyZi1hcGkvbGliL2dvb2dsZS11MmYtYXBpLmpzPzY5ZDUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRWE7O0FBRWI7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFQSxxQkFBcUI7O0FBRXJCO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxzREFBc0Q7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLHdDQUF3QztBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUssNEJBQTRCO0FBQ2pDO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxVQUFVLGFBQWEsRUFBRTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsZ0JBQWdCO0FBQy9CLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLHNCQUFzQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7O0FBR0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLHNEQUFzRDtBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsZ0JBQWdCO0FBQ3ZDOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyw0QkFBNEI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0EsV0FBVyx3QkFBd0I7QUFDbkMsV0FBVyx1Q0FBdUM7QUFDbEQsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyw0QkFBNEI7QUFDdkMsV0FBVyx3QkFBd0I7QUFDbkMsV0FBVywyQ0FBMkM7QUFDdEQsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3UyZi1hcGkvbGliL2dvb2dsZS11MmYtYXBpLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTQgR29vZ2xlIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZFxuLy9cbi8vIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlXG4vLyBsaWNlbnNlIHRoYXQgY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgb3IgYXRcbi8vIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL29wZW4tc291cmNlL2xpY2Vuc2VzL2JzZFxuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgVGhlIFUyRiBhcGkuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKiogTmFtZXNwYWNlIGZvciB0aGUgVTJGIGFwaS5cbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbnZhciB1MmYgPSB1MmYgfHwge307XG5cbm1vZHVsZS5leHBvcnRzID0gdTJmOyAvLyBBZGFwdGF0aW9uIGZvciB1MmYtYXBpIHBhY2thZ2VcblxuLyoqXG4gKiBUaGUgVTJGIGV4dGVuc2lvbiBpZFxuICogQHR5cGUge3N0cmluZ31cbiAqIEBjb25zdFxuICovXG51MmYuRVhURU5TSU9OX0lEID0gJ2ttZW5kZmFwZ2dqZWhvZG5kZmxtbWdhZ2RiYW1obmZkJztcblxuLyoqXG4gKiBNZXNzYWdlIHR5cGVzIGZvciBtZXNzc2FnZXMgdG8vZnJvbSB0aGUgZXh0ZW5zaW9uXG4gKiBAY29uc3RcbiAqIEBlbnVtIHtzdHJpbmd9XG4gKi9cbnUyZi5NZXNzYWdlVHlwZXMgPSB7XG4gICdVMkZfUkVHSVNURVJfUkVRVUVTVCc6ICd1MmZfcmVnaXN0ZXJfcmVxdWVzdCcsXG4gICdVMkZfU0lHTl9SRVFVRVNUJzogJ3UyZl9zaWduX3JlcXVlc3QnLFxuICAnVTJGX1JFR0lTVEVSX1JFU1BPTlNFJzogJ3UyZl9yZWdpc3Rlcl9yZXNwb25zZScsXG4gICdVMkZfU0lHTl9SRVNQT05TRSc6ICd1MmZfc2lnbl9yZXNwb25zZSdcbn07XG5cbi8qKlxuICogUmVzcG9uc2Ugc3RhdHVzIGNvZGVzXG4gKiBAY29uc3RcbiAqIEBlbnVtIHtudW1iZXJ9XG4gKi9cbnUyZi5FcnJvckNvZGVzID0ge1xuICAnT0snOiAwLFxuICAnT1RIRVJfRVJST1InOiAxLFxuICAnQkFEX1JFUVVFU1QnOiAyLFxuICAnQ09ORklHVVJBVElPTl9VTlNVUFBPUlRFRCc6IDMsXG4gICdERVZJQ0VfSU5FTElHSUJMRSc6IDQsXG4gICdUSU1FT1VUJzogNVxufTtcblxuLyoqXG4gKiBBIG1lc3NhZ2UgdHlwZSBmb3IgcmVnaXN0cmF0aW9uIHJlcXVlc3RzXG4gKiBAdHlwZWRlZiB7e1xuICogICB0eXBlOiB1MmYuTWVzc2FnZVR5cGVzLFxuICogICBzaWduUmVxdWVzdHM6IEFycmF5Ljx1MmYuU2lnblJlcXVlc3Q+LFxuICogICByZWdpc3RlclJlcXVlc3RzOiA/QXJyYXkuPHUyZi5SZWdpc3RlclJlcXVlc3Q+LFxuICogICB0aW1lb3V0U2Vjb25kczogP251bWJlcixcbiAqICAgcmVxdWVzdElkOiA/bnVtYmVyXG4gKiB9fVxuICovXG51MmYuUmVxdWVzdDtcblxuLyoqXG4gKiBBIG1lc3NhZ2UgZm9yIHJlZ2lzdHJhdGlvbiByZXNwb25zZXNcbiAqIEB0eXBlZGVmIHt7XG4gKiAgIHR5cGU6IHUyZi5NZXNzYWdlVHlwZXMsXG4gKiAgIHJlc3BvbnNlRGF0YTogKHUyZi5FcnJvciB8IHUyZi5SZWdpc3RlclJlc3BvbnNlIHwgdTJmLlNpZ25SZXNwb25zZSksXG4gKiAgIHJlcXVlc3RJZDogP251bWJlclxuICogfX1cbiAqL1xudTJmLlJlc3BvbnNlO1xuXG4vKipcbiAqIEFuIGVycm9yIG9iamVjdCBmb3IgcmVzcG9uc2VzXG4gKiBAdHlwZWRlZiB7e1xuICogICBlcnJvckNvZGU6IHUyZi5FcnJvckNvZGVzLFxuICogICBlcnJvck1lc3NhZ2U6ID9zdHJpbmdcbiAqIH19XG4gKi9cbnUyZi5FcnJvcjtcblxuLyoqXG4gKiBEYXRhIG9iamVjdCBmb3IgYSBzaW5nbGUgc2lnbiByZXF1ZXN0LlxuICogQHR5cGVkZWYge3tcbiAqICAgdmVyc2lvbjogc3RyaW5nLFxuICogICBjaGFsbGVuZ2U6IHN0cmluZyxcbiAqICAga2V5SGFuZGxlOiBzdHJpbmcsXG4gKiAgIGFwcElkOiBzdHJpbmdcbiAqIH19XG4gKi9cbnUyZi5TaWduUmVxdWVzdDtcblxuLyoqXG4gKiBEYXRhIG9iamVjdCBmb3IgYSBzaWduIHJlc3BvbnNlLlxuICogQHR5cGVkZWYge3tcbiAqICAga2V5SGFuZGxlOiBzdHJpbmcsXG4gKiAgIHNpZ25hdHVyZURhdGE6IHN0cmluZyxcbiAqICAgY2xpZW50RGF0YTogc3RyaW5nXG4gKiB9fVxuICovXG51MmYuU2lnblJlc3BvbnNlO1xuXG4vKipcbiAqIERhdGEgb2JqZWN0IGZvciBhIHJlZ2lzdHJhdGlvbiByZXF1ZXN0LlxuICogQHR5cGVkZWYge3tcbiAqICAgdmVyc2lvbjogc3RyaW5nLFxuICogICBjaGFsbGVuZ2U6IHN0cmluZyxcbiAqICAgYXBwSWQ6IHN0cmluZ1xuICogfX1cbiAqL1xudTJmLlJlZ2lzdGVyUmVxdWVzdDtcblxuLyoqXG4gKiBEYXRhIG9iamVjdCBmb3IgYSByZWdpc3RyYXRpb24gcmVzcG9uc2UuXG4gKiBAdHlwZWRlZiB7e1xuICogICByZWdpc3RyYXRpb25EYXRhOiBzdHJpbmcsXG4gKiAgIGNsaWVudERhdGE6IHN0cmluZ1xuICogfX1cbiAqL1xudTJmLlJlZ2lzdGVyUmVzcG9uc2U7XG5cblxuLy8gTG93IGxldmVsIE1lc3NhZ2VQb3J0IEFQSSBzdXBwb3J0XG5cbi8qKlxuICogQ2FsbCBNZXNzYWdlUG9ydCBkaXNjb25uZWN0XG4gKi9cbnUyZi5kaXNjb25uZWN0ID0gZnVuY3Rpb24oKSB7XG4gIGlmICh1MmYucG9ydF8gJiYgdTJmLnBvcnRfLnBvcnRfKSB7XG4gICAgdTJmLnBvcnRfLnBvcnRfLmRpc2Nvbm5lY3QoKTtcbiAgICB1MmYucG9ydF8gPSBudWxsO1xuICB9XG59O1xuXG4vKipcbiAqIFNldHMgdXAgYSBNZXNzYWdlUG9ydCB0byB0aGUgVTJGIGV4dGVuc2lvbiB1c2luZyB0aGVcbiAqIGF2YWlsYWJsZSBtZWNoYW5pc21zLlxuICogQHBhcmFtIHtmdW5jdGlvbigoTWVzc2FnZVBvcnR8dTJmLldyYXBwZWRDaHJvbWVSdW50aW1lUG9ydF8pKX0gY2FsbGJhY2tcbiAqL1xudTJmLmdldE1lc3NhZ2VQb3J0ID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBjaHJvbWUgIT0gJ3VuZGVmaW5lZCcgJiYgY2hyb21lLnJ1bnRpbWUpIHtcbiAgICAvLyBUaGUgYWN0dWFsIG1lc3NhZ2UgaGVyZSBkb2VzIG5vdCBtYXR0ZXIsIGJ1dCB3ZSBuZWVkIHRvIGdldCBhIHJlcGx5XG4gICAgLy8gZm9yIHRoZSBjYWxsYmFjayB0byBydW4uIFRodXMsIHNlbmQgYW4gZW1wdHkgc2lnbmF0dXJlIHJlcXVlc3RcbiAgICAvLyBpbiBvcmRlciB0byBnZXQgYSBmYWlsdXJlIHJlc3BvbnNlLlxuICAgIHZhciBtc2cgPSB7XG4gICAgICB0eXBlOiB1MmYuTWVzc2FnZVR5cGVzLlUyRl9TSUdOX1JFUVVFU1QsXG4gICAgICBzaWduUmVxdWVzdHM6IFtdXG4gICAgfTtcbiAgICBjaHJvbWUucnVudGltZS5zZW5kTWVzc2FnZSh1MmYuRVhURU5TSU9OX0lELCBtc2csIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCFjaHJvbWUucnVudGltZS5sYXN0RXJyb3IpIHtcbiAgICAgICAgLy8gV2UgYXJlIG9uIGEgd2hpdGVsaXN0ZWQgb3JpZ2luIGFuZCBjYW4gdGFsayBkaXJlY3RseVxuICAgICAgICAvLyB3aXRoIHRoZSBleHRlbnNpb24uXG4gICAgICAgIHUyZi5nZXRDaHJvbWVSdW50aW1lUG9ydF8oY2FsbGJhY2spO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gY2hyb21lLnJ1bnRpbWUgd2FzIGF2YWlsYWJsZSwgYnV0IHdlIGNvdWxkbid0IG1lc3NhZ2VcbiAgICAgICAgLy8gdGhlIGV4dGVuc2lvbiBkaXJlY3RseSwgdXNlIGlmcmFtZVxuICAgICAgICB1MmYuZ2V0SWZyYW1lUG9ydF8oY2FsbGJhY2spO1xuICAgICAgfVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIC8vIGNocm9tZS5ydW50aW1lIHdhcyBub3QgYXZhaWxhYmxlIGF0IGFsbCwgd2hpY2ggaXMgbm9ybWFsXG4gICAgLy8gd2hlbiB0aGlzIG9yaWdpbiBkb2Vzbid0IGhhdmUgYWNjZXNzIHRvIGFueSBleHRlbnNpb25zLlxuICAgIHUyZi5nZXRJZnJhbWVQb3J0XyhjYWxsYmFjayk7XG4gIH1cbn07XG5cbi8qKlxuICogQ29ubmVjdHMgZGlyZWN0bHkgdG8gdGhlIGV4dGVuc2lvbiB2aWEgY2hyb21lLnJ1bnRpbWUuY29ubmVjdFxuICogQHBhcmFtIHtmdW5jdGlvbih1MmYuV3JhcHBlZENocm9tZVJ1bnRpbWVQb3J0Xyl9IGNhbGxiYWNrXG4gKiBAcHJpdmF0ZVxuICovXG51MmYuZ2V0Q2hyb21lUnVudGltZVBvcnRfID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgdmFyIHBvcnQgPSBjaHJvbWUucnVudGltZS5jb25uZWN0KHUyZi5FWFRFTlNJT05fSUQsXG4gICAgeydpbmNsdWRlVGxzQ2hhbm5lbElkJzogdHJ1ZX0pO1xuICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgIGNhbGxiYWNrKG51bGwsIG5ldyB1MmYuV3JhcHBlZENocm9tZVJ1bnRpbWVQb3J0Xyhwb3J0KSk7XG4gIH0sIDApO1xufTtcblxuLyoqXG4gKiBBIHdyYXBwZXIgZm9yIGNocm9tZS5ydW50aW1lLlBvcnQgdGhhdCBpcyBjb21wYXRpYmxlIHdpdGggTWVzc2FnZVBvcnQuXG4gKiBAcGFyYW0ge1BvcnR9IHBvcnRcbiAqIEBjb25zdHJ1Y3RvclxuICogQHByaXZhdGVcbiAqL1xudTJmLldyYXBwZWRDaHJvbWVSdW50aW1lUG9ydF8gPSBmdW5jdGlvbihwb3J0KSB7XG4gIHRoaXMucG9ydF8gPSBwb3J0O1xufTtcblxuLyoqXG4gKiBQb3N0cyBhIG1lc3NhZ2Ugb24gdGhlIHVuZGVybHlpbmcgY2hhbm5lbC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBtZXNzYWdlXG4gKi9cbnUyZi5XcmFwcGVkQ2hyb21lUnVudGltZVBvcnRfLnByb3RvdHlwZS5wb3N0TWVzc2FnZSA9IGZ1bmN0aW9uKG1lc3NhZ2UpIHtcbiAgdGhpcy5wb3J0Xy5wb3N0TWVzc2FnZShtZXNzYWdlKTtcbn07XG5cbi8qKlxuICogRW11bGF0ZXMgdGhlIEhUTUwgNSBhZGRFdmVudExpc3RlbmVyIGludGVyZmFjZS4gV29ya3Mgb25seSBmb3IgdGhlXG4gKiBvbm1lc3NhZ2UgZXZlbnQsIHdoaWNoIGlzIGhvb2tlZCB1cCB0byB0aGUgY2hyb21lLnJ1bnRpbWUuUG9ydC5vbk1lc3NhZ2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHtkYXRhOiBPYmplY3R9KX0gaGFuZGxlclxuICovXG51MmYuV3JhcHBlZENocm9tZVJ1bnRpbWVQb3J0Xy5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24oZXZlbnROYW1lLCBoYW5kbGVyKSB7XG4gIHZhciBuYW1lID0gZXZlbnROYW1lLnRvTG93ZXJDYXNlKCk7XG4gIGlmIChuYW1lID09ICdtZXNzYWdlJyB8fCBuYW1lID09ICdvbm1lc3NhZ2UnKSB7XG4gICAgdGhpcy5wb3J0Xy5vbk1lc3NhZ2UuYWRkTGlzdGVuZXIoZnVuY3Rpb24obWVzc2FnZSkge1xuICAgICAgLy8gRW11bGF0ZSBhIG1pbmltYWwgTWVzc2FnZUV2ZW50IG9iamVjdFxuICAgICAgaGFuZGxlcih7J2RhdGEnOiBtZXNzYWdlfSk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgY29uc29sZS5lcnJvcignV3JhcHBlZENocm9tZVJ1bnRpbWVQb3J0IG9ubHkgc3VwcG9ydHMgb25NZXNzYWdlJyk7XG4gIH1cbn07XG5cbi8qKlxuICogU2V0cyB1cCBhbiBlbWJlZGRlZCB0cmFtcG9saW5lIGlmcmFtZSwgc291cmNlZCBmcm9tIHRoZSBleHRlbnNpb24uXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKE1lc3NhZ2VQb3J0KX0gY2FsbGJhY2tcbiAqIEBwcml2YXRlXG4gKi9cbnUyZi5nZXRJZnJhbWVQb3J0XyA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gIC8vIENyZWF0ZSB0aGUgaWZyYW1lXG4gIHZhciBpZnJhbWVPcmlnaW4gPSAnY2hyb21lLWV4dGVuc2lvbjovLycgKyB1MmYuRVhURU5TSU9OX0lEO1xuICB2YXIgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gIGlmcmFtZS5zcmMgPSBpZnJhbWVPcmlnaW4gKyAnL3UyZi1jb21tcy5odG1sJztcbiAgaWZyYW1lLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCAnZGlzcGxheTpub25lJyk7XG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcblxuICB2YXIgaGFzQ2FsbGVkQmFjayA9IGZhbHNlO1xuXG4gIHZhciBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gIHZhciByZWFkeSA9IGZ1bmN0aW9uKG1lc3NhZ2UpIHtcbiAgICBpZiAobWVzc2FnZS5kYXRhID09ICdyZWFkeScpIHtcbiAgICAgIGNoYW5uZWwucG9ydDEucmVtb3ZlRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIHJlYWR5KTtcbiAgICAgIGlmICghaGFzQ2FsbGVkQmFjaylcbiAgICAgIHtcbiAgICAgICAgaGFzQ2FsbGVkQmFjayA9IHRydWU7XG4gICAgICAgIGNhbGxiYWNrKG51bGwsIGNoYW5uZWwucG9ydDEpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdGaXJzdCBldmVudCBvbiBpZnJhbWUgcG9ydCB3YXMgbm90IFwicmVhZHlcIicpO1xuICAgIH1cbiAgfTtcbiAgY2hhbm5lbC5wb3J0MS5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgcmVhZHkpO1xuICBjaGFubmVsLnBvcnQxLnN0YXJ0KCk7XG5cbiAgaWZyYW1lLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBmdW5jdGlvbigpIHtcbiAgICAvLyBEZWxpdmVyIHRoZSBwb3J0IHRvIHRoZSBpZnJhbWUgYW5kIGluaXRpYWxpemVcbiAgICBpZnJhbWUuY29udGVudFdpbmRvdy5wb3N0TWVzc2FnZSgnaW5pdCcsIGlmcmFtZU9yaWdpbiwgW2NoYW5uZWwucG9ydDJdKTtcbiAgfSk7XG5cbiAgLy8gR2l2ZSB0aGlzIDIwMG1zIHRvIGluaXRpYWxpemUsIGFmdGVyIHRoYXQsIHdlIHRyZWF0IHRoaXMgbWV0aG9kIGFzIGZhaWxlZFxuICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgIGlmICghaGFzQ2FsbGVkQmFjaylcbiAgICB7XG4gICAgICBoYXNDYWxsZWRCYWNrID0gdHJ1ZTtcbiAgICAgIGNhbGxiYWNrKG5ldyBFcnJvcihcIklGcmFtZSBleHRlbnNpb24gbm90IHN1cHBvcnRlZFwiKSk7XG4gICAgfVxuICB9LCAyMDApO1xufTtcblxuXG4vLyBIaWdoLWxldmVsIEpTIEFQSVxuXG4vKipcbiAqIERlZmF1bHQgZXh0ZW5zaW9uIHJlc3BvbnNlIHRpbWVvdXQgaW4gc2Vjb25kcy5cbiAqIEBjb25zdFxuICovXG51MmYuRVhURU5TSU9OX1RJTUVPVVRfU0VDID0gMzA7XG5cbi8qKlxuICogQSBzaW5nbGV0b24gaW5zdGFuY2UgZm9yIGEgTWVzc2FnZVBvcnQgdG8gdGhlIGV4dGVuc2lvbi5cbiAqIEB0eXBlIHtNZXNzYWdlUG9ydHx1MmYuV3JhcHBlZENocm9tZVJ1bnRpbWVQb3J0X31cbiAqIEBwcml2YXRlXG4gKi9cbnUyZi5wb3J0XyA9IG51bGw7XG5cbi8qKlxuICogQ2FsbGJhY2tzIHdhaXRpbmcgZm9yIGEgcG9ydFxuICogQHR5cGUge0FycmF5LjxmdW5jdGlvbigoTWVzc2FnZVBvcnR8dTJmLldyYXBwZWRDaHJvbWVSdW50aW1lUG9ydF8pKT59XG4gKiBAcHJpdmF0ZVxuICovXG51MmYud2FpdGluZ0ZvclBvcnRfID0gW107XG5cbi8qKlxuICogQSBjb3VudGVyIGZvciByZXF1ZXN0SWRzLlxuICogQHR5cGUge251bWJlcn1cbiAqIEBwcml2YXRlXG4gKi9cbnUyZi5yZXFDb3VudGVyXyA9IDA7XG5cbi8qKlxuICogQSBtYXAgZnJvbSByZXF1ZXN0SWRzIHRvIGNsaWVudCBjYWxsYmFja3NcbiAqIEB0eXBlIHtPYmplY3QuPG51bWJlciwoZnVuY3Rpb24oKHUyZi5FcnJvcnx1MmYuUmVnaXN0ZXJSZXNwb25zZSkpXG4gKiAgICAgICAgICAgICAgICAgICAgICAgfGZ1bmN0aW9uKCh1MmYuRXJyb3J8dTJmLlNpZ25SZXNwb25zZSkpKT59XG4gKiBAcHJpdmF0ZVxuICovXG51MmYuY2FsbGJhY2tNYXBfID0ge307XG5cbi8qKlxuICogQ3JlYXRlcyBvciByZXRyaWV2ZXMgdGhlIE1lc3NhZ2VQb3J0IHNpbmdsZXRvbiB0byB1c2UuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKChNZXNzYWdlUG9ydHx1MmYuV3JhcHBlZENocm9tZVJ1bnRpbWVQb3J0XykpfSBjYWxsYmFja1xuICogQHByaXZhdGVcbiAqL1xudTJmLmdldFBvcnRTaW5nbGV0b25fID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgaWYgKHUyZi5wb3J0Xykge1xuICAgIGNhbGxiYWNrKG51bGwsIHUyZi5wb3J0Xyk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHUyZi53YWl0aW5nRm9yUG9ydF8ubGVuZ3RoID09IDApIHtcbiAgICAgIHUyZi5nZXRNZXNzYWdlUG9ydChmdW5jdGlvbihlcnIsIHBvcnQpIHtcbiAgICAgICAgaWYgKCFlcnIpIHtcbiAgICAgICAgICB1MmYucG9ydF8gPSBwb3J0O1xuICAgICAgICAgIHUyZi5wb3J0Xy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJyxcbiAgICAgICAgICAgIC8qKiBAdHlwZSB7ZnVuY3Rpb24oRXZlbnQpfSAqLyAodTJmLnJlc3BvbnNlSGFuZGxlcl8pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENhcmVmdWwsIGhlcmUgYmUgYXN5bmMgY2FsbGJhY2tzLiBNYXliZS5cbiAgICAgICAgd2hpbGUgKHUyZi53YWl0aW5nRm9yUG9ydF8ubGVuZ3RoKVxuICAgICAgICAgIHUyZi53YWl0aW5nRm9yUG9ydF8uc2hpZnQoKShlcnIsIHBvcnQpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHUyZi53YWl0aW5nRm9yUG9ydF8ucHVzaChjYWxsYmFjayk7XG4gIH1cbn07XG5cbi8qKlxuICogSGFuZGxlcyByZXNwb25zZSBtZXNzYWdlcyBmcm9tIHRoZSBleHRlbnNpb24uXG4gKiBAcGFyYW0ge01lc3NhZ2VFdmVudC48dTJmLlJlc3BvbnNlPn0gbWVzc2FnZVxuICogQHByaXZhdGVcbiAqL1xudTJmLnJlc3BvbnNlSGFuZGxlcl8gPSBmdW5jdGlvbihtZXNzYWdlKSB7XG4gIHZhciByZXNwb25zZSA9IG1lc3NhZ2UuZGF0YTtcbiAgdmFyIHJlcUlkID0gcmVzcG9uc2VbJ3JlcXVlc3RJZCddO1xuICBpZiAoIXJlcUlkIHx8ICF1MmYuY2FsbGJhY2tNYXBfW3JlcUlkXSkge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1Vua25vd24gb3IgbWlzc2luZyByZXF1ZXN0SWQgaW4gcmVzcG9uc2UuJyk7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBjYiA9IHUyZi5jYWxsYmFja01hcF9bcmVxSWRdO1xuICBkZWxldGUgdTJmLmNhbGxiYWNrTWFwX1tyZXFJZF07XG4gIGNiKG51bGwsIHJlc3BvbnNlWydyZXNwb25zZURhdGEnXSk7XG59O1xuXG4vKipcbiAqIENhbGxzIHRoZSBjYWxsYmFjayB3aXRoIHRydWUgb3IgZmFsc2UgYXMgZmlyc3QgYW5kIG9ubHkgYXJndW1lbnRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKi9cbnUyZi5pc1N1cHBvcnRlZCA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gIHUyZi5nZXRQb3J0U2luZ2xldG9uXyhmdW5jdGlvbihlcnIsIHBvcnQpIHtcbiAgICBjYWxsYmFjayghZXJyKTtcbiAgfSk7XG59XG5cbi8qKlxuICogRGlzcGF0Y2hlcyBhbiBhcnJheSBvZiBzaWduIHJlcXVlc3RzIHRvIGF2YWlsYWJsZSBVMkYgdG9rZW5zLlxuICogQHBhcmFtIHtBcnJheS48dTJmLlNpZ25SZXF1ZXN0Pn0gc2lnblJlcXVlc3RzXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCh1MmYuRXJyb3J8dTJmLlNpZ25SZXNwb25zZSkpfSBjYWxsYmFja1xuICogQHBhcmFtIHtudW1iZXI9fSBvcHRfdGltZW91dFNlY29uZHNcbiAqL1xudTJmLnNpZ24gPSBmdW5jdGlvbihzaWduUmVxdWVzdHMsIGNhbGxiYWNrLCBvcHRfdGltZW91dFNlY29uZHMpIHtcbiAgdTJmLmdldFBvcnRTaW5nbGV0b25fKGZ1bmN0aW9uKGVyciwgcG9ydCkge1xuICAgIGlmIChlcnIpXG4gICAgICByZXR1cm4gY2FsbGJhY2soZXJyKTtcblxuICAgIHZhciByZXFJZCA9ICsrdTJmLnJlcUNvdW50ZXJfO1xuICAgIHUyZi5jYWxsYmFja01hcF9bcmVxSWRdID0gY2FsbGJhY2s7XG4gICAgdmFyIHJlcSA9IHtcbiAgICAgIHR5cGU6IHUyZi5NZXNzYWdlVHlwZXMuVTJGX1NJR05fUkVRVUVTVCxcbiAgICAgIHNpZ25SZXF1ZXN0czogc2lnblJlcXVlc3RzLFxuICAgICAgdGltZW91dFNlY29uZHM6ICh0eXBlb2Ygb3B0X3RpbWVvdXRTZWNvbmRzICE9PSAndW5kZWZpbmVkJyA/XG4gICAgICAgIG9wdF90aW1lb3V0U2Vjb25kcyA6IHUyZi5FWFRFTlNJT05fVElNRU9VVF9TRUMpLFxuICAgICAgcmVxdWVzdElkOiByZXFJZFxuICAgIH07XG4gICAgcG9ydC5wb3N0TWVzc2FnZShyZXEpO1xuICB9KTtcbn07XG5cbi8qKlxuICogRGlzcGF0Y2hlcyByZWdpc3RlciByZXF1ZXN0cyB0byBhdmFpbGFibGUgVTJGIHRva2Vucy4gQW4gYXJyYXkgb2Ygc2lnblxuICogcmVxdWVzdHMgaWRlbnRpZmllcyBhbHJlYWR5IHJlZ2lzdGVyZWQgdG9rZW5zLlxuICogQHBhcmFtIHtBcnJheS48dTJmLlJlZ2lzdGVyUmVxdWVzdD59IHJlZ2lzdGVyUmVxdWVzdHNcbiAqIEBwYXJhbSB7QXJyYXkuPHUyZi5TaWduUmVxdWVzdD59IHNpZ25SZXF1ZXN0c1xuICogQHBhcmFtIHtmdW5jdGlvbigodTJmLkVycm9yfHUyZi5SZWdpc3RlclJlc3BvbnNlKSl9IGNhbGxiYWNrXG4gKiBAcGFyYW0ge251bWJlcj19IG9wdF90aW1lb3V0U2Vjb25kc1xuICovXG51MmYucmVnaXN0ZXIgPSBmdW5jdGlvbihyZWdpc3RlclJlcXVlc3RzLCBzaWduUmVxdWVzdHMsXG4gICAgY2FsbGJhY2ssIG9wdF90aW1lb3V0U2Vjb25kcykge1xuICB1MmYuZ2V0UG9ydFNpbmdsZXRvbl8oZnVuY3Rpb24oZXJyLCBwb3J0KSB7XG4gICAgaWYgKGVycilcbiAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpO1xuXG4gICAgdmFyIHJlcUlkID0gKyt1MmYucmVxQ291bnRlcl87XG4gICAgdTJmLmNhbGxiYWNrTWFwX1tyZXFJZF0gPSBjYWxsYmFjaztcbiAgICB2YXIgcmVxID0ge1xuICAgICAgdHlwZTogdTJmLk1lc3NhZ2VUeXBlcy5VMkZfUkVHSVNURVJfUkVRVUVTVCxcbiAgICAgIHNpZ25SZXF1ZXN0czogc2lnblJlcXVlc3RzLFxuICAgICAgcmVnaXN0ZXJSZXF1ZXN0czogcmVnaXN0ZXJSZXF1ZXN0cyxcbiAgICAgIHRpbWVvdXRTZWNvbmRzOiAodHlwZW9mIG9wdF90aW1lb3V0U2Vjb25kcyAhPT0gJ3VuZGVmaW5lZCcgP1xuICAgICAgICBvcHRfdGltZW91dFNlY29uZHMgOiB1MmYuRVhURU5TSU9OX1RJTUVPVVRfU0VDKSxcbiAgICAgIHJlcXVlc3RJZDogcmVxSWRcbiAgICB9O1xuICAgIHBvcnQucG9zdE1lc3NhZ2UocmVxKTtcbiAgfSk7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/u2f-api/lib/google-u2f-api.js\n");

/***/ }),

/***/ "./node_modules/u2f-api/lib/u2f-api.js":
/*!*********************************************!*\
  !*** ./node_modules/u2f-api/lib/u2f-api.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = API;\n\nvar chromeApi = __webpack_require__( /*! ./google-u2f-api */ \"./node_modules/u2f-api/lib/google-u2f-api.js\" );\n\n// Feature detection (yes really)\nvar isBrowser = ( typeof navigator !== 'undefined' ) && !!navigator.userAgent;\nvar isSafari = isBrowser && navigator.userAgent.match( /Safari\\// )\n\t&& !navigator.userAgent.match( /Chrome\\// );\nvar isEDGE = isBrowser && navigator.userAgent.match( /Edge\\/1[2345]/ );\n\nvar _backend = null;\nfunction getBackend( Promise )\n{\n\tif ( !_backend )\n\t\t_backend = new Promise( function( resolve, reject )\n\t\t{\n\t\t\tfunction notSupported( )\n\t\t\t{\n\t\t\t\t// Note; {native: true} means *not* using Google's hack\n\t\t\t\tresolve( { u2f: null, native: true } );\n\t\t\t}\n\n\t\t\tif ( !isBrowser )\n\t\t\t\treturn notSupported( );\n\n\t\t\tif ( isSafari )\n\t\t\t\t// Safari doesn't support U2F, and the Safari-FIDO-U2F\n\t\t\t\t// extension lacks full support (Multi-facet apps), so we\n\t\t\t\t// block it until proper support.\n\t\t\t\treturn notSupported( );\n\n\t\t\tvar hasNativeSupport =\n\t\t\t\t( typeof window.u2f !== 'undefined' ) &&\n\t\t\t\t( typeof window.u2f.sign === 'function' );\n\n\t\t\tif ( hasNativeSupport )\n\t\t\t\tresolve( { u2f: window.u2f, native: true } );\n\n\t\t\tif ( isEDGE )\n\t\t\t\t// We don't want to check for Google's extension hack on EDGE\n\t\t\t\t// as it'll cause trouble (popups, etc)\n\t\t\t\treturn notSupported( );\n\n\t\t\tif ( location.protocol === 'http:' )\n\t\t\t\t// U2F isn't supported over http, only https\n\t\t\t\treturn notSupported( );\n\n\t\t\tif ( typeof MessageChannel === 'undefined' )\n\t\t\t\t// Unsupported browser, the chrome hack would throw\n\t\t\t\treturn notSupported( );\n\n\t\t\t// Test for google extension support\n\t\t\tchromeApi.isSupported( function( ok )\n\t\t\t{\n\t\t\t\tif ( ok )\n\t\t\t\t\tresolve( { u2f: chromeApi, native: false } );\n\t\t\t\telse\n\t\t\t\t\tnotSupported( );\n\t\t\t} );\n\t\t} );\n\n\treturn _backend;\n}\n\nfunction API( Promise )\n{\n\treturn {\n\t\tisSupported   : isSupported.bind( Promise ),\n\t\tensureSupport : ensureSupport.bind( Promise ),\n\t\tregister      : register.bind( Promise ),\n\t\tsign          : sign.bind( Promise ),\n\t\tErrorCodes    : API.ErrorCodes,\n\t\tErrorNames    : API.ErrorNames\n\t};\n}\n\nAPI.ErrorCodes = {\n\tCANCELLED: -1,\n\tOK: 0,\n\tOTHER_ERROR: 1,\n\tBAD_REQUEST: 2,\n\tCONFIGURATION_UNSUPPORTED: 3,\n\tDEVICE_INELIGIBLE: 4,\n\tTIMEOUT: 5\n};\nAPI.ErrorNames = {\n\t\"-1\": \"CANCELLED\",\n\t\"0\": \"OK\",\n\t\"1\": \"OTHER_ERROR\",\n\t\"2\": \"BAD_REQUEST\",\n\t\"3\": \"CONFIGURATION_UNSUPPORTED\",\n\t\"4\": \"DEVICE_INELIGIBLE\",\n\t\"5\": \"TIMEOUT\"\n};\n\nfunction makeError( msg, err )\n{\n\tvar code = err != null ? err.errorCode : 1; // Default to OTHER_ERROR\n\tvar type = API.ErrorNames[ '' + code ];\n\tvar error = new Error( msg );\n\terror.metaData = {\n\t\ttype: type,\n\t\tcode: code\n\t}\n\treturn error;\n}\n\nfunction deferPromise( Promise, promise )\n{\n\tvar ret = { };\n\tret.promise = new Promise( function( resolve, reject ) {\n\t\tret.resolve = resolve;\n\t\tret.reject = reject;\n\t\tpromise.then( resolve, reject );\n\t} );\n\t/**\n\t * Reject request promise and disconnect port if 'disconnect' flag is true\n\t * @param {string} msg\n\t * @param {boolean} disconnect\n\t */\n\tret.promise.cancel = function( msg, disconnect )\n\t{\n\t\tgetBackend( Promise )\n\t\t.then( function( backend )\n\t\t{\n\t\t\tif ( disconnect && !backend.native )\n\t\t\t\tbackend.u2f.disconnect( );\n\n\t\t\tret.reject( makeError( msg, { errorCode: -1 } ) );\n\t\t} );\n\t};\n\treturn ret;\n}\n\nfunction defer( Promise, fun )\n{\n\treturn deferPromise( Promise, new Promise( function( resolve, reject )\n\t{\n\t\ttry\n\t\t{\n\t\t\tfun && fun( resolve, reject );\n\t\t}\n\t\tcatch ( err )\n\t\t{\n\t\t\treject( err );\n\t\t}\n\t} ) );\n}\n\nfunction isSupported( )\n{\n\tvar Promise = this;\n\n\treturn getBackend( Promise )\n\t.then( function( backend )\n\t{\n\t\treturn !!backend.u2f;\n\t} );\n}\n\nfunction _ensureSupport( backend )\n{\n\tif ( !backend.u2f )\n\t{\n\t\tif ( location.protocol === 'http:' )\n\t\t\tthrow new Error( \"U2F isn't supported over http, only https\" );\n\t\tthrow new Error( \"U2F not supported\" );\n\t}\n}\n\nfunction ensureSupport( )\n{\n\tvar Promise = this;\n\n\treturn getBackend( Promise )\n\t.then( _ensureSupport );\n}\n\nfunction register( registerRequests, signRequests /* = null */, timeout )\n{\n\tvar Promise = this;\n\n\tif ( !Array.isArray( registerRequests ) )\n\t\tregisterRequests = [ registerRequests ];\n\n\tif ( typeof signRequests === 'number' && typeof timeout === 'undefined' )\n\t{\n\t\ttimeout = signRequests;\n\t\tsignRequests = null;\n\t}\n\n\tif ( !signRequests )\n\t\tsignRequests = [ ];\n\n\treturn deferPromise( Promise, getBackend( Promise )\n\t.then( function( backend )\n\t{\n\t\t_ensureSupport( backend );\n\n\t\tvar native = backend.native;\n\t\tvar u2f = backend.u2f;\n\n\t\treturn new Promise( function( resolve, reject )\n\t\t{\n\t\t\tfunction cbNative( response )\n\t\t\t{\n\t\t\t\tif ( response.errorCode )\n\t\t\t\t\treject( makeError( \"Registration failed\", response ) );\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdelete response.errorCode;\n\t\t\t\t\tresolve( response );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction cbChrome( err, response )\n\t\t\t{\n\t\t\t\tif ( err )\n\t\t\t\t\treject( err );\n\t\t\t\telse if ( response.errorCode )\n\t\t\t\t\treject( makeError( \"Registration failed\", response ) );\n\t\t\t\telse\n\t\t\t\t\tresolve( response );\n\t\t\t}\n\n\t\t\tif ( native )\n\t\t\t{\n\t\t\t\tvar appId = registerRequests[ 0 ].appId;\n\n\t\t\t\tu2f.register(\n\t\t\t\t\tappId, registerRequests, signRequests, cbNative, timeout );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tu2f.register(\n\t\t\t\t\tregisterRequests, signRequests, cbChrome, timeout );\n\t\t\t}\n\t\t} );\n\t} ) ).promise;\n}\n\nfunction sign( signRequests, timeout )\n{\n\tvar Promise = this;\n\n\tif ( !Array.isArray( signRequests ) )\n\t\tsignRequests = [ signRequests ];\n\n\treturn deferPromise( Promise, getBackend( Promise )\n\t.then( function( backend )\n\t{\n\t\t_ensureSupport( backend );\n\n\t\tvar native = backend.native;\n\t\tvar u2f = backend.u2f;\n\n\t\treturn new Promise( function( resolve, reject )\n\t\t{\n\t\t\tfunction cbNative( response )\n\t\t\t{\n\t\t\t\tif ( response.errorCode )\n\t\t\t\t\treject( makeError( \"Sign failed\", response ) );\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdelete response.errorCode;\n\t\t\t\t\tresolve( response );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction cbChrome( err, response )\n\t\t\t{\n\t\t\t\tif ( err )\n\t\t\t\t\treject( err );\n\t\t\t\telse if ( response.errorCode )\n\t\t\t\t\treject( makeError( \"Sign failed\", response ) );\n\t\t\t\telse\n\t\t\t\t\tresolve( response );\n\t\t\t}\n\n\t\t\tif ( native )\n\t\t\t{\n\t\t\t\tvar appId = signRequests[ 0 ].appId;\n\t\t\t\tvar challenge = signRequests[ 0 ].challenge;\n\n\t\t\t\tu2f.sign( appId, challenge, signRequests, cbNative, timeout );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tu2f.sign( signRequests, cbChrome, timeout );\n\t\t\t}\n\t\t} );\n\t} ) ).promise;\n}\n\nfunction makeDefault( func )\n{\n\tAPI[ func ] = function( )\n\t{\n\t\tif ( !__webpack_require__.g.Promise )\n\t\t\t// This is very unlikely to ever happen, since browsers\n\t\t\t// supporting U2F will most likely support Promises.\n\t\t\tthrow new Error( \"The platform doesn't natively support promises\" );\n\n\t\tvar args = [ ].slice.call( arguments );\n\t\treturn API( __webpack_require__.g.Promise )[ func ].apply( null, args );\n\t};\n}\n\n// Provide default functions using the built-in Promise if available.\nmakeDefault( 'isSupported' );\nmakeDefault( 'ensureSupport' );\nmakeDefault( 'register' );\nmakeDefault( 'sign' );\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/u2f-api/lib/u2f-api.js\n");

/***/ })

}]);